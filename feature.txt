feature を finish するときは必ずコミットが1つにまとめられるのか？
2回目のコミット。

結論：

まとめられなかった。（featureブランチは削除された。）
こんどはrebaseしてみる


test3がfinishしたあとで、test2をrebaseしてみた。
このファイルでconflictが発生したので、いま解消中。




実験2:
featureを作る。
2回コミットする。
feature rebaseする。 ★ここで何も起こらなかった。実験中止。
feature finishする。


実験3:
featureを作る。
2回コミットする。

別のfeatureを作って、finishする。（これによりdevelopブランチを先に進める）

もとのfeatureでrebaseする。⇒別のfeatureが取り込まれて一本に並んだ。
もとのfeatureでfinishする。
★まとめられなかった。

※git flow feature publish するかどうかが、まとまるかどうかの分岐点のような気がする。
publishする ⇒ develop上には1つしかコミットが残らない。その代わりpublishしたブランチは削除されないので、そちらに履歴が残る。


実験4:
feature f1 を作る。
1つコミットする。
publishする。

feature f2を作る。
1つコミットして、f2をfinishする。

f1でもう一つコミットする。
f1でrebaseする。

f1でもう一つコミットする。
f1でrebaseしてみた。⇒何も起きなかった（up-to-dateと言われた）
f1でgit flow feature pull originしてみた⇒conflictが発生した

vagrant@rails-dev-box:/vagrant/github_sandbox(feature/f1)$ git lg
*   74abc64 2015-05-21 Leo RDB  (HEAD, feature/f1) f1で git flow feature pull origin してみた。 feature.txtでconflic
|\
| * 773f117 2015-05-21 Leo RDB  (origin/feature/f1) f1 1回目
* | 28670f2 2015-05-21 Leo RDB  f1（3回目）
* | c1a6d1d 2015-05-21 Leo RDB  f1（2回目）
* | 9dadda1 2015-05-21 Leo RDB  f1 1回目
* | 47b3b87 2015-05-21 Leo RDB  (develop) f2 1回目
|/
*   662d9fe 2015-05-21 Leo RDB  test2からdevelopへのmergeコミット。

f1 1回目 が2箇所に出てきた！

f1をrebaseする。⇒conflictが発生したので修正する（いまここ）

f1をfinishする。
